---
import "bootstrap/dist/css/bootstrap.css"
import "~/styles/general.css"

import { MeiliSearch } from "meilisearch"

import { pageOrder } from "~/content"
import { useTranslations } from "~/i18n/util"

const t = useTranslations(Astro)
export const prerender = false
const { lang, platform } = Astro.params
const client = new MeiliSearch({
  host: import.meta.env.MEILISEARCH_HOST,
  apiKey: import.meta.env.MEILISEARCH_SEARCH_KEY,
})
const index = client.index(`sfm-manual-${lang}`)

const query = Astro.url.searchParams.get("q")
if (!query) {
  return new Response(null, { status: 400 })
}
const search = await index.search(query, {
  attributesToHighlight: ["content"],
  attributesToCrop: ["content"],
  cropLength: 50,
})
---

<html lang={lang}>
  <head>
    <title>{t("search.resultsHeading")} - Remote Incident Manager</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <main>
      <h1>{t("search.resultsHeading")}</h1>
      {
        search.hits.length > 0 ? (
          <ul>
            {search.hits.map((hit) => {
              return (
                <li>
                  <a href={`/${lang}/${platform}/${hit.id}/`}>{hit.title}</a>
                  <p>
                    <Fragment set:html={hit._formatted.content} />
                  </p>
                </li>
              )
            })}
          </ul>
        ) : (
          <p>{t("search.noResults")}</p>
        )
      }
    </main>
    <footer>
      <p>
        <a href={`/${lang}/${platform}/${pageOrder[0]}/`}>{t("search.back")}</a>
      </p>
    </footer>
  </body>
</html>
